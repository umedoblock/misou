= 概念
= shuffle, まぜこぜ
  mazekoze has four parts.
== index list
    0 -> 0x0a80...
    1 -> 0x1a81...
    2 -> 0x2a82...
    3 -> 0x3a83...

=== まぜこぜの point rule
    楕円曲線上の点の元となる座標値は，全参加者にとって
    ありふれた，馴染み深い値である必要がある。

    例えば，素数であるとか，2のべき乗数であるとか。
    素数の平方数を...
>>> for n in (10 ** 6, 10 ** 6 + 2):
...   print("n =", n, math.sqrt(n))
...
n = 1000000 1000.0
n = 1000002 1000.0009999995
    こんなことになったので，素数の平方数案は却下。
    素数を座標値に絡ませるのであれば，座標値として，素数をそのまま使おう。

=== how to attack mazekoze
    参加者にとって馴染みのない値を座標値とする楕円曲線上の点を
    選択することを許した場合，attacker が以下の攻撃を実行する事が可能となる。

    楕円曲線上の任意の点Pを一つ選ぶ。乱数rを用意して，r^-1 mod orderを計算する。
    Q = r * P ... (1)
    を計算し，参加者に P, Q を伝える。
    参加者は，乱数 s を用意して，P, Q を以下のように計算する。
    X = s * P
    Y = s * Q
    そして，attacker にX, Y を伝える。
    この時，attacker は，X, Y のどちらがP, Qであったか分からないはずである。

    attacker は，X, Y に対し，r^-1をschalor倍算する。
    X = s * P = (s * r^-1) P
    Y = s * Q = (s * r^-1) Q
              = (s * r^-1) * r * P
              = s * P
              = X !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    なんと，attacker は，受け取ったX, Y の両方を r^-1 倍することで，
    X, Y のどちらが P 由来であるか判定できてしまった。

    これは，参加者にとって馴染みのない値を座標値とする楕円曲線上の点を
    選択することを attacker に許したからである。

    よって，冒頭で述べた通り，楕円曲線上の点の元となる座標値は，全参加者にとって
    ありふれた，馴染み深い値である必要がある。

== game rule
=== games
    ポーカー，七並べ，大富豪，麻雀，チンチロ，半丁，17歩（カイジの），，，
    簡単そうなのから簡単に実装しよう。

=== script type
    rule book class ?
    Python3 script ?

    or

    selfish script ? 独自実装する？
    独自実装って大変だよ。
    説明しないといけないし，覚えてもらわないといけない。
    両者（開発者，理解者）の負担になる。
    だったら，機能制限した Python3 script で良いと思う。
    まあ，実装に入ってから詳細を考えよう。
    始めの一つ二つは，Python3 script で実装しよう。

    参加者にn枚配る。
    deck に残りを残す。
    ・・・

    bitcoin での，
    OP_xxx, smart construct
    とかそんな感じ？

    いずれの形にせよ，各nodeが事前に検証して，
    遊ぶか否か，自分で判断する。
    遊ぶゲームは承認の形で電子署名として残す。
    判断の形を電子署名にして，承認の形で，自身の local に保存する。

    ゲームの承認を他者に公開することは想定しない。
    ただし，他者に公開することを禁ずるわけではない。
    いつでも，承認の電子署名を破棄すること出来る。
    また，信頼のおけるものの判断を鵜呑みにすることも出来る。
    PGP の信頼の輪的な考え？
    人がゲームのルールに置き換わったと考えていいかな。

=== programmer
    これは誰もが自由に開発できる。
    開発者を求める部分。
    programming 用に開発しないといけない。
    大変そう。重そう。

    地域（国，都道府県）の大きな単位毎に個々のgameが存在すると思う。
    また，そのgameの細かいruleは，地域の細かい単位によって異なると思われる。

    こち亀で，大富豪のルールを募集している回があったと思う。
    募集結果を発表する回で，両さんがもう良い。と許しを乞うていた。
    とてもたくさんの細かい違いがあったのだと思う。
    細々した部分を私が全て開発するなど不可能なので，細々した部分のruleを
    主張している人に好きなように開発してもらった方が絶対に良い。

== verify proceed game
    card の並び検証
    機能開発として，重そう。大変そう。

    game の進行中は，game 開始時刻との相対時間で，各々の動作を記録する。
    各々の動作を記録する事で，最終的に game 終了時間，検証完了時間を確定させる際に，
    役立てることが出来る。それぞれの時間を偽ろうとした場合など。

= Node

== judge, result
    結果, 判定
    block chain から引っ張ってきた game result を
    node 各々が好きなように判断する。

    RuleBook とは切り離せるようにしたいな。

    ただし，どの script を使ったのか公開するべし。
    期間だったり，対局者の再帰的判断だったり。

== make timestamp
    この timestamp でもって，block chain に連ねるための
    block に加えるか否か判断する。
    対局終了後の検証完了時刻の一番最後

    対局完了の時間から5(=10/2)分以内が望ましい。
    他の参加者は5分以内に受け取ったとみなして良い。

= DHT, 馬跳び

= block chain
== mining
=== Justice of Punctual.
    JoP
    時間を固く守る事が正義。

    mining

    block 作成の時間単位は10分毎。
    timestamp で10分毎に区切る。
    積極的に提出するのは有利になる参加者。
    次の単位に含ませることはない。
    時間に遅れた場合は，単位に含めない。
    transaction を多くする方が有利。

=== Proof of Punctual.
    PoP
    時間を固く守る事の証明。

=== which ?
    JoP, PoP
    どっち？

    Justice ! には，
    遊び的な意味を含ませたい。
    ネタ的な意味を含ませたい。
    と思う。
    Proof って真面目な感じがする。

    味噌荘自体が遊びの場だし。
    Justice !
    って言いたいよね。

    Justice of me.
    我が正義なり。

    って言いたいよね。

=== some chains
    以下は長々と side chain の話だっただろうか。。。
    うーん。

    chain が server の役割を果たしていると考えてみても良いのかな？

    main chain.
        punctual chain ?
    sub chain.
        free chain ?
    timestamp chain.
        timestamp は，main chain が兼ねる。
        としても目的は満たす。
        しかし，時間単位が長い。10分単位で main chain は
        伸びていく。
        timestamp chain としては，理想は1秒毎，現実的な解として，
        1分毎にchainが伸びていって欲しい。
        rename main chain to punctual chain ?

        一つの block chain 系で一つのみのchainって事はない。
        複数の chain を用意して，chainを 相互に関連させて目的の system
        を作り上げれば良い。

        所々 chain を変えて，一つの block chain としたって良い。
        chain 技術は，私の定義では，

        一単位に区切った電子情報を，
        参加者の合意に基づいて，
        一方向に連ねる技術

        何だから。
        chain を変更しても，
        一方向に連ねていれば，それで良い。
    honor chain
        main or punctual chain を伸ばしていった人の名前を書き込む chain
        参加者から慕われる。
        block の中に honor を含ませておく，bitocin 方式の方が良いかも？
        実験的に試してみたい。
        どちらがより良い結果を生むのか。
        場面，文脈によって一長一短ではないだろうか？
        失敗であれば失敗としての経験を積めるわけだし。
    signer chain
        chain とは別方向に，signer を genesis block から伸ばしていこう。
        signer は管理者として，伸びていったchainの内容を変更できる。
        各 node は，signer を empty として，
        管理する者を何人も認めない。
        としたって良い。
    shiba dog chain !
        many shiba dog photos
